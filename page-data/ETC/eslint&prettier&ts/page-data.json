{"componentChunkName":"component---src-templates-blog-post-js","path":"/ETC/eslint&prettier&ts/","result":{"data":{"site":{"siteMetadata":{"title":"Avocode","author":"[eatnug]","siteUrl":"https://eatnug.github.io","comment":{"disqusShortName":"","utterances":"eatnug/inbox"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"32c76776-9a97-554d-81fa-ce3434af8830","excerpt":"Robert Cooper의 ‘Using ESLint and Prettier in a TypeScript Project’를 저작자의 허가를 받고 번역한 글입니다. 타입스크립트 코드를 린트 하고 싶을때 고려할 수 있는 선택지가 크게 두가지 있는데, TSLint와 ESLint이다. TSLint는 타입스크립트 전용 린터이고, ESLint는 자바스크립트와 타입스크립트 모두를 지원한다. 타입스크립트 코어 팀은 TypeScript 2019 Roadmap에서 ‘TSLint보다 ESLint…","html":"<blockquote>\n<p>Robert Cooper의 <a href=\"https://www.robertcooper.me/using-eslint-and-prettier-in-a-typescript-project\">‘Using ESLint and Prettier in a TypeScript Project’</a>를 저작자의 허가를 받고 번역한 글입니다.</p>\n</blockquote>\n<p>타입스크립트 코드를 린트 하고 싶을때 고려할 수 있는 선택지가 크게 두가지 있는데, <a href=\"https://palantir.github.io/tslint/\">TSLint</a>와 <a href=\"https://eslint.org/\">ESLint</a>이다. TSLint는 타입스크립트 전용 린터이고, ESLint는 자바스크립트와 타입스크립트 모두를 지원한다.</p>\n<p>타입스크립트 코어 팀은 <a href=\"https://github.com/Microsoft/TypeScript/issues/29288#developer-productivity-tools-and-integration\">TypeScript 2019 Roadmap</a>에서 <strong><em>‘TSLint보다 ESLint의 아키텍쳐가 성능면에서 우월하므로, 앞으로는 타입스크립트를 위한 린터 통합 제공에 있어서 ESLint에만 집중하겠다`</em></strong>라고 설명했다. 이러한 이유로 나는 타입스크립트 프로젝트에서 린트를 사용할 때 ESLint를 사용하기를 추천한다.</p>\n<h2 id=\"eslint를-타입스크립트와-함께-쓸-수-있도록-세팅하기\" style=\"position:relative;\"><a href=\"#eslint%EB%A5%BC-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%ED%95%A8%EA%BB%98-%EC%93%B8-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\" aria-label=\"eslint를 타입스크립트와 함께 쓸 수 있도록 세팅하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ESLint를 타입스크립트와 함께 쓸 수 있도록 세팅하기</h2>\n<p>우선 ESLint 사용을 위해 필요한 개발의존성을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin</code></pre></div>\n<blockquote>\n<p>저자 주: 만약 <code class=\"language-text\">create-react-app</code> 으로 프로젝트를 시작했다면, <code class=\"language-text\">eslint</code>는 <code class=\"language-text\">react-scripts</code>에 의해 이미 의존성에 추가되어서, 따로 다시 설치할 필요가 없다.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/eslint\">eslint</a>: 핵심 ESLint 라이브러리</li>\n<li><a href=\"https://www.npmjs.com/package/@typescript-eslint/parser\">@typescript-eslint/parser</a>: ESLint가 타입스크립트 코드를 린트 할 수 있도록 해주는 파서</li>\n<li><a href=\"https://www.npmjs.com/package/@typescript-eslint/eslint-plugin\">@typescript-eslint/eslint-plugin</a>: 타입스크립트를 타겟으로 하는 ESLint 규칙들을 포함하고 있는 플러그인</li>\n</ul>\n<p>다음으로, <code class=\"language-text\">.eslintrc.js</code> 설정 파일을 프로젝트 루트 디렉토리에 만든다. 타입스크립트 프로젝트를 위한 설정파일의 예시는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* .eslintrc.js */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parser<span class=\"token operator\">:</span> <span class=\"token string\">'@typescript-eslint/parser'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ESLint 파서를 지정한다.</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'plugin:@typescript-eslint/recommended'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// @typescript-eslint/eslint-plugin 규칙을 사용한다.</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ESLint 규칙을 작성한다. 앞서 extend 한 규칙들을 덮어쓸 수 도 있다.</span>\n    <span class=\"token comment\">// 예시 \"@typescript-eslint/explicit-function-return-type\": \"off\",</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>저자 주: 나는 <code class=\"language-text\">.eslintrc</code> 파일을 <code class=\"language-text\">.js</code> 확장자로 선언하는 것을 선호하는데, <code class=\"language-text\">.json</code> 파일은 필요할 때 규칙에 대한 주석을 달 수 없기 때문이다.</p>\n</blockquote>\n<p>만약 타입스크립트와 함께 리액트를 사용한다면, <a href=\"https://www.npmjs.com/package/eslint-plugin-react\"><code class=\"language-text\">eslint-plugin-react</code></a>도 설치되어야 하고, 설정 파일은 다음과 같이 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* .eslintrc.js */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parser<span class=\"token operator\">:</span> <span class=\"token string\">'@typescript-eslint/parser'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ESLint 파서를 지정한다.</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'plugin:react/recommended'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// @eslint-plugin-react 의 규칙을 사용한다.</span>\n    <span class=\"token string\">'plugin:@typescript-eslint/recommended'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// @typescript-eslint/eslint-plugin 의 규칙을 사용한다.</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ecmaFeatures<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      jsx<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// jsx의 파싱을 허용한다.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ESLint 규칙을 작성한다. extends 한 규칙들을 덮어쓸 수 도 있다.</span>\n    <span class=\"token comment\">// 예시 \"@typescript-eslint/explicit-function-return-type\": \"off\",</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  settings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    react<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      version<span class=\"token operator\">:</span> <span class=\"token string\">'detect'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// eslint-plugin-react에게 사용하고 있는 리액트의 버전을 알아서 탐지하도록 한다.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>궁극적으로 <code class=\"language-text\">.eslintrc.js</code> 파일의 <code class=\"language-text\">rules</code> 객체에 어떤 규칙을 사용하고, 어디에서 규칙을 <code class=\"language-text\">extend</code>할 것 인지는 당신의 자유이다.</p>\n<h2 id=\"prettier-까지-추가하기\" style=\"position:relative;\"><a href=\"#prettier-%EA%B9%8C%EC%A7%80-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"prettier 까지 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prettier 까지 추가하기</h2>\n<p>코드를 포매팅해주는 도구인 <a href=\"https://prettier.io/\">prettier</a>는 ESLint와 조합이 아주 좋다. prettier를 ESLint와 함께 사용하기 위해서는 다음과 같은 개발의존성들을 설치해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D prettier eslint-config-prettier eslint-plugin-prettier</code></pre></div>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/prettier\">prettier</a>: 핵심 prettier 라이브러리</li>\n<li><a href=\"https://www.npmjs.com/package/eslint-config-prettier\">eslint-config-prettier</a>: prettier와 충돌할 수 있는 ESLint 규칙을 비활성화 해주는 도구</li>\n<li><a href=\"https://www.npmjs.com/package/eslint-plugin-prettier\">eslint-plugin-prettier</a>: prettier를 ESLint의 규칙으로 사용하기 위한 도구</li>\n</ul>\n<p>prettier를 설정하기 위해서, <code class=\"language-text\">.prettierrc.js</code> 파일을 프로젝트 루트 디렉토리에 만들어야 한다. 예시는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* .prettierrc.js */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  semi<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  trailingComma<span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span>\n  singleQuote<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  printWidth<span class=\"token operator\">:</span> <span class=\"token number\">120</span><span class=\"token punctuation\">,</span>\n  tabWidth<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음으로 <code class=\"language-text\">.eslintrc.js</code> 파일을 수정해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* .eslintrc.js */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parser<span class=\"token operator\">:</span> <span class=\"token string\">'@typescript-eslint/parser'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ESLint 파서를 지정한다.</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'plugin:react/recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// @eslint-plugin-react의 규칙을 사용한다.</span>\n    <span class=\"token string\">'plugin:@typescript-eslint/recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// @typescript-eslint/ eslint-plugin의 규칙을 사용한다.</span>\n    <span class=\"token string\">'prettier/@typescript-eslint'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// eslint-config-prettier를 사용해서 @typescript-eslint/eslint-plugin의 규칙들 중 prettier와 충돌하는 규칙을 비활성화한다.</span>\n    <span class=\"token string\">'plugin:prettier/recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// eslint-plugin-prettier와 eslint-config-prettier를 활성화한다. prettier 에러를 eslint 에러로 표시해 줄 것이다. 이 설정은 반드시 extends 배열의 마지막 값이어야 한다.</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ecmaVersion<span class=\"token operator\">:</span> <span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 모던 ES의 파싱을 허용한다.</span>\n    sourceType<span class=\"token operator\">:</span> <span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// import의 사용을 허용한다.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>저자 주: <code class=\"language-text\">plugin:prettier/recommended</code>는 반드시 <code class=\"language-text\">extends</code> 배열의 마지막 값이어야 한다.</p>\n</blockquote>\n<p><code class=\"language-text\">eslint-plugin-prettier</code>를 사용해 prettier를 ESLint의 규칙으로 설정해두면, <code class=\"language-text\">--fix</code> 옵션을 걸고 ESLint를 실행할때 린트 에러 뿐 아니라 prettier 에러까지 수정해주기 때문에 자동으로 포매팅이 된다.</p>\n<h2 id=\"vs-code에서-자동으로-코드-수정하기\" style=\"position:relative;\"><a href=\"#vs-code%EC%97%90%EC%84%9C-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EC%BD%94%EB%93%9C-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"vs code에서 자동으로 코드 수정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VS Code에서 자동으로 코드 수정하기</h2>\n<p>좋은 개발 경험을 위해서는, 코드를 저장할때마다 ESLint의 자동수정(<code class=\"language-text\">eslint --fix</code>와 같은) 커맨드를 실행하도록 설정해두는게 좋다. 나는 VS Code를 사용하고, VS Code에서 파일을 저장할 때마다 자동수정을 실행하기 위해서는 VS Code의 설정파일인 <code class=\"language-text\">settings.json</code>에 다음과 같은 내용을 작성하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">/* settings.json (vscode 세팅파일) */</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint.autoFixOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 위 설정 값은 deprecate 되었다, 대신 editor.codeActionsOnSave를 사용하자.</span>\n  <span class=\"token property\">\"editor.codeActionsOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"source.fixAll.eslint\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"javascriptreact\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typescript\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"autoFix\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typescriptreact\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"autoFix\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 역자 주: autoFix 설정을 true로 세팅한다면 다음과 같이 일반적인 문자열로 작성해도 된다.</span>\n    <span class=\"token string\">\"typescript\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"typescriptreact\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 <code class=\"language-text\">editor.formatOnSave</code> 옵션도 <code class=\"language-text\">true</code>로 설정했다면, 자바스크립트 또는 타입스크립트 파일을 저장할 때 포매팅이 두번 실행되지 않도록 다음과 같은 설정을 추가해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">/* settings.json (vscode 세팅파일) */</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"[javascript]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"[javascriptreact]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"[typescript]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"[typescriptreact]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"커맨드라인-인터페이스cli로-eslint-실행하기\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%A7%A8%EB%93%9C%EB%9D%BC%EC%9D%B8-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4cli%EB%A1%9C-eslint-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0\" aria-label=\"커맨드라인 인터페이스cli로 eslint 실행하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커맨드라인 인터페이스(CLI)로 ESLint 실행하기</h2>\n<p>프로젝트의 모든 코드가 컴파일러 세팅이나 포매팅, 스타일 규칙에 어긋나지 않도록 확인해주는 <code class=\"language-text\">lint</code> 커맨드는 <code class=\"language-text\">package.json</code>의 <a href=\"https://docs.npmjs.com/misc/scripts\">scripts</a> 에 추가해두면 매우 유용하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">/* package.json */</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc --noEmit &amp;&amp; eslint '*/**/*.{js,ts,tsx}' --quiet --fix\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 스크립트는 커맨드라인에서 <code class=\"language-text\">npm run lint</code> 또는 <code class=\"language-text\">yarn lint</code>를 입력하면 실행된다. 이 커맨드는 먼저 타입스크립트 컴파일러를 실행하고, 타입스크립트 에러가 있으면 보고한다. 만약 에러가 없다면 그다음 모든 <code class=\"language-text\">.js</code>, <code class=\"language-text\">.ts</code>, <code class=\"language-text\">.tsx</code> 파일에 대해 ESLint를 실행한다. 자동수정으로 수정될 수 있는 에러들은 수정되고 남은 에러가 있다면 터미널 창에 출력된다.</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\">타입스크립트 CLI 옵션</a></li>\n<li><a href=\"https://eslint.org/docs/user-guide/command-line-interface\">ESLint CLI 옵션</a></li>\n</ul>\n<h2 id=\"eslint-에러와-포매팅-에러가-커밋되지-않게-방지하기\" style=\"position:relative;\"><a href=\"#eslint-%EC%97%90%EB%9F%AC%EC%99%80-%ED%8F%AC%EB%A7%A4%ED%8C%85-%EC%97%90%EB%9F%AC%EA%B0%80-%EC%BB%A4%EB%B0%8B%EB%90%98%EC%A7%80-%EC%95%8A%EA%B2%8C-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"eslint 에러와 포매팅 에러가 커밋되지 않게 방지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ESLint 에러와 포매팅 에러가 커밋되지 않게 방지하기</h2>\n<p>깃에 커밋되는 모든 코드를 타입스크립트, 린트, 포매팅 에러로부터 자유롭게 하고싶다면, <code class=\"language-text\">lint-staged</code> 라는 도구를 사용하면 된다. <code class=\"language-text\">lint-staged</code>는 커밋되기 위해 스테이지 된 파일들에 대해 린트를 할 수 있게 해준다. <code class=\"language-text\">lint-staged</code>를 <code class=\"language-text\">husky</code>와 함께 사용하면, 커밋이 실행되기 직전에 스테이지된 파일들을 대상으로 <code class=\"language-text\">lint-staged</code>에 명시된 린트 작업을 수행하도록 할 수 있다.(git hooks가 낯설다면 <a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks\">이 글</a>을 읽어보자.)</p>\n<blockquote>\n<p>역자 주: 본문에서는 <code class=\"language-text\">lint-staged</code>와 <code class=\"language-text\">husky</code>를 설치하는 과정이 나와있지 않은데 앞서 살펴 본 두 도구와 마찬가지로 <code class=\"language-text\">yarn add -D lint-staged husky</code> 커맨드로 설치할 수 있다.</p>\n</blockquote>\n<p><code class=\"language-text\">lint-stage</code>와 <code class=\"language-text\">husky</code>를 설정하기 위해서는 다음과 같은 내용을 <code class=\"language-text\">package.json</code>에 추가하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">/* package.json */</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.{js,ts,tsx}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"eslint --fix\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"git add\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 설정하면 사용자가 코드를 커밋하려고 할 때 <code class=\"language-text\">lint-staged</code>명령이 실행된다. 그러면 <code class=\"language-text\">lint-staged</code>는 모든 <code class=\"language-text\">,js</code>, <code class=\"language-text\">.ts</code>, <code class=\"language-text\">.tsx</code> 파일들에 대해 ESLint를 실행한다. 자동수정이 가능한 에러들은 수정되어서 커밋 될 것이다. 만약 자동수정이 불가능한 에러가 있다면, 커밋은 중단될 것이고, 해당 에러를 직접 해결해야 다시 커밋할 수 있다.</p>\n<p>개인적으로 나는 커밋 할 때 타입스크립트 컴파일러 에러 또한 통과시키고 싶지 않기 때문에, pre-commit 훅에 타입스크립트 에러를 체크하는 명령도 추가한다. <code class=\"language-text\">husky</code> 설정을 다음과 같이 변경하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">/* package.json */</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc --noEmit &amp;&amp; lint-staged\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그런데 git hooks는 커밋할 때 <code class=\"language-text\">--no-verify</code>라는 <a href=\"https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---no-verify\">flag</a>를 달면 생략되기 때문에, <code class=\"language-text\">lint-staged</code>와 <code class=\"language-text\">husky</code>에만 의존하는 방법은 커밋된 코드를 에러로부터 지켜내기에는 역부족이다. 그러므로 <a href=\"https://codeship.com/continuous-integration-essentials\">CI</a> 서버에서 타입스크립트와 린트 에러가 없는 것을 확인하는 다음과 같은 커맨드를 실행하는것을 추천한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tsc --noEmit <span class=\"token operator\">&amp;&amp;</span> eslint <span class=\"token string\">'*/**/*.{js,ts,tsx}'</span> --quiet</code></pre></div>\n<p>위 명령어에서는 <code class=\"language-text\">eslint</code> cli에 <code class=\"language-text\">--fix</code> 옵션을 넘기지 않는데, 이렇게 하면 어떤 에러든 자동으로 수정하지 않고 출력한다. 자동수정이 가능한 에러는 이미 커밋단계에서 필터링 되어있어야 하기 때문에, CI가 자동으로 코드를 수정하는 일은 일어나서는 안된다.</p>\n<p>이렇게 ESLint와 Prettier로 타입스크립트 프로젝트를 린트하고 포매팅하는 방법을 알아보았다 😎</p>\n<h3 id=\"본문\" style=\"position:relative;\"><a href=\"#%EB%B3%B8%EB%AC%B8\" aria-label=\"본문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>본문</h3>\n<p><a href=\"https://www.robertcooper.me/using-eslint-and-prettier-in-a-typescript-project\">Using ESLint and Prettier in a TypeScript Project</a> - Robert Cooper</p>","frontmatter":{"title":"번역] 타입스크립트 프로젝트에서 eslint와 prettier 사용하기","date":"April 19, 2020","tags":["typescript","eslint","prettier","tools"],"category":"ETC"}}},"pageContext":{"slug":"/ETC/eslint&prettier&ts/","previous":{"fields":{"slug":"/frontend/storybook/first/"},"frontmatter":{"title":"스토리북을 이용한 컴포넌트 개발 (1) - 시작하기","category":"Frontend"}},"next":{"fields":{"slug":"/frontend/modern_react_testing/first/"},"frontmatter":{"title":"번역] 모던 리액트 테스팅, 파트 1 - 모범사례","category":"Frontend"}}}}}